

//bankers algorithm

#include <stdio.h>
#include <stdbool.h>

#define P 5 // Number of processes
#define R 3 // Number of resources

// Function to print a matrix
void print_matrix(int matrix[][R], char* name) {
    printf("%s:\n", name);
    for (int i = 0; i < P; i++) {
        printf("Process %d: ", i);
        for (int j = 0; j < R; j++) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
}

// Function to calculate the need matrix
void calculate_need(int max[][R], int allot[][R], int need[][R]) {
    for (int i = 0; i < P; i++)
        for (int j = 0; j < R; j++)
            need[i][j] = max[i][j] - allot[i][j];
}

// Function to check if the system is in a safe state
bool is_safe(int processes[], int avail[], int max[][R], int allot[][R]) {
    int need[P][R];
    calculate_need(max, allot, need);

    bool finish[P] = {0};
    int safeSeq[P];
    int work[R];
    for (int i = 0; i < R; i++)
        work[i] = avail[i];

    int count = 0;
    while (count < P) {
        bool found = false;
        for (int p = 0; p < P; p++) {
            if (!finish[p]) {
                int j;
                for (j = 0; j < R; j++)
                    if (need[p][j] > work[j])
                        break;

                if (j == R) {
                    for (int k = 0; k < R; k++)
                        work[k] += allot[p][k];

                    safeSeq[count++] = p;
                    finish[p] = true;
                    found = true;
                }
            }
        }

        if (!found) {
            printf("System is not in a safe state\n");
            return false;
        }
    }

    printf("System is in a safe state.\nSafe sequence is: ");
    for (int i = 0; i < P; i++)
        printf("%d ", safeSeq[i]);
    printf("\n");

    return true;
}

int main() {
    int processes[] = {0, 1, 2, 3, 4};

    int avail[] = {3, 3, 2};

    int max[P][R] = {
        {7, 5, 3},
        {3, 2, 2},
        {9, 0, 2},
        {2, 2, 2},
        {4, 3, 3}
    };

    int allot[P][R] = {
        {0, 1, 0},
        {2, 0, 0},
        {3, 0, 2},
        {2, 1, 1},
        {0, 0, 2}
    };

    is_safe(processes, avail, max, allot);

    // Print need matrix
    int need[P][R];
    calculate_need(max, allot, need);
    print_matrix(need, "Need Matrix");

    return 0;
}






//deadlock detection algo

#include <stdio.h>
#include <stdbool.h>

#define P 5 // Number of processes
#define R 3 // Number of resources

// Function to check if the system is in a deadlock state
bool detect_deadlock(int processes[], int avail[], int alloc[][R], int request[][R]) {
    bool finish[P] = {0}; // Finish array to indicate if a process can finish
    int work[R]; // Work array to simulate resource allocation
    for (int i = 0; i < R; i++)
        work[i] = avail[i];

    while (true) {
        bool found = false; // Initialize found to false at the start of each iteration
        for (int p = 0; p < P; p++) {
            if (!finish[p]) { // Check only unfinished processes
                int j;
                for (j = 0; j < R; j++)
                    if (request[p][j] > work[j])
                        break; // If request exceeds available resources, break

                if (j == R) { // If all requests can be satisfied
                    for (int k = 0; k < R; k++)
                        work[k] += alloc[p][k]; // Release resources
                    finish[p] = true; // Mark process as finished
                    found = true; // Set found to true indicating a process could proceed
                }
            }
        }

        if (!found) // If no process could proceed in this iteration
            break; // Exit the while loop
    }

    for (int i = 0; i < P; i++) {
        if (!finish[i]) { // If any process is not finished
            printf("System is in a deadlock state. Deadlocked processes are: ");
            for (int j = 0; j < P; j++)
                if (!finish[j])
                    printf("P%d ", j); // Print the deadlocked processes
            printf("\n");
            return true;
        }
    }

    printf("System is not in a deadlock state.\n");
    return false;
}

int main() {
    int processes[] = {0, 1, 2, 3, 4};

    int avail[] = {3, 3, 2};

    int alloc[P][R] = {
        {0, 1, 0},
        {2, 0, 0},
        {3, 0, 2},
        {2, 1, 1},
        {0, 0, 2}
    };

    int request[P][R] = {
        {0, 0, 0},
        {2, 0, 2},
        {0, 0, 0},
        {1, 0, 0},
        {0, 0, 2}
    };

    detect_deadlock(processes, avail, alloc, request);

    return 0;
}





//a. worst fit, best fit, next fit, first fit

#include <stdio.h>

#define NUM_BLOCKS 5
#define NUM_PROCESSES 4

int blockSize[NUM_BLOCKS] = {100, 500, 200, 300, 600};
int processSize[NUM_PROCESSES] = {212, 417, 112, 426};
int allocation[NUM_PROCESSES];

// Function to allocate memory using First Fit strategy
void firstFit() {
    for (int i = 0; i < NUM_PROCESSES; i++) {
        for (int j = 0; j < NUM_BLOCKS; j++) {
            if (blockSize[j] >= processSize[i]) {
                allocation[i] = j;
                blockSize[j] -= processSize[i];
                break;
            }
        }
    }
}

// Function to allocate memory using Worst Fit strategy
void worstFit() {
    for (int i = 0; i < NUM_PROCESSES; i++) {
        int worstIdx = -1;
        for (int j = 0; j < NUM_BLOCKS; j++) {
            if (blockSize[j] >= processSize[i]) {
                if (worstIdx == -1 || blockSize[j] > blockSize[worstIdx]) {
                    worstIdx = j;
                }
            }
        }
        if (worstIdx != -1) {
            allocation[i] = worstIdx;
            blockSize[worstIdx] -= processSize[i];
        }
    }
}

// Function to allocate memory using Best Fit strategy
void bestFit() {
    for (int i = 0; i < NUM_PROCESSES; i++) {
        int bestIdx = -1;
        for (int j = 0; j < NUM_BLOCKS; j++) {
            if (blockSize[j] >= processSize[i]) {
                if (bestIdx == -1 || blockSize[j] < blockSize[bestIdx]) {
                    bestIdx = j;
                }
            }
        }
        if (bestIdx != -1) {
            allocation[i] = bestIdx;
            blockSize[bestIdx] -= processSize[i];
        }
    }
}

// Function to allocate memory using Next Fit strategy
void nextFit() {
    int startIdx = 0;
    for (int i = 0; i < NUM_PROCESSES; i++) {
        for (int j = startIdx; j < NUM_BLOCKS; j++) {
            if (blockSize[j] >= processSize[i]) {
                allocation[i] = j;
                blockSize[j] -= processSize[i];
                startIdx = j; // Update the starting point for next fit
                break;
            }
        }
    }
}

int main() {
    // Reset memory blocks
    for (int i = 0; i < NUM_BLOCKS; i++) {
        blockSize[i] = blockSize[i]; // Reset to original sizes
    }

    // First Fit
    firstFit();
    printf("First Fit Allocation:\n");
    for (int i = 0; i < NUM_PROCESSES; i++) {
        printf("Process P%d -> Block %d\n", i, allocation[i]);
    }
    printf("\n");

    // Reset memory blocks
    for (int i = 0; i < NUM_BLOCKS; i++) {
        blockSize[i] = blockSize[i]; // Reset to original sizes
    }

    // Worst Fit
    worstFit();
    printf("Worst Fit Allocation:\n");
    for (int i = 0; i < NUM_PROCESSES; i++) {
        printf("Process P%d -> Block %d\n", i, allocation[i]);
    }
    printf("\n");

    // Reset memory blocks
    for (int i = 0; i < NUM_BLOCKS; i++) {
        blockSize[i] = blockSize[i]; // Reset to original sizes
    }

    // Best Fit
    bestFit();
    printf("Best Fit Allocation:\n");
    for (int i = 0; i < NUM_PROCESSES; i++) {
        printf("Process P%d -> Block %d\n", i, allocation[i]);
    }
    printf("\n");

    // Reset memory blocks
    for (int i = 0; i < NUM_BLOCKS; i++) {
        blockSize[i] = blockSize[i]; // Reset to original sizes
    }

    // Next Fit
    nextFit();
    printf("Next Fit Allocation:\n");
    for (int i = 0; i < NUM_PROCESSES; i++) {
        printf("Process P%d -> Block %d\n", i, allocation[i]);
    }

    return 0;
}
 




//page replacement algos


#include <stdio.h>
#include <stdlib.h>

// Function to simulate FIFO page replacement algorithm
int FIFO(int pages[], int n, int frameSize) {
    int fifoQueue[frameSize];
    int pageTable[100] = {0};
    int pageFaults = 0;
    int rear = -1;

    for (int i = 0; i < n; i++) {
        if (pageTable[pages[i]] == 0) {
            if (rear < frameSize - 1) {
                rear++;
                fifoQueue[rear] = pages[i];
                pageTable[pages[i]] = 1;
                pageFaults++;
            } else {
                pageTable[fifoQueue[0]] = 0;
                for (int j = 0; j < rear; j++) {
                    fifoQueue[j] = fifoQueue[j + 1];
                }
                fifoQueue[rear] = pages[i];
                pageTable[pages[i]] = 1;
                pageFaults++;
            }
        }
    }

    return pageFaults;
}

// Function to simulate Optimal page replacement algorithm
int Optimal(int pages[], int n, int frameSize) {
    int pageFaults = 0;
    int nextPage[100];
    int frame[frameSize];
    int pos = 0;

    for (int i = 0; i < n; ++i) {
        nextPage[pages[i]] = -1;
        for (int j = i + 1; j < n; ++j) {
            if (pages[j] == pages[i]) {
                nextPage[pages[i]] = j;
                break;
            }
        }
    }

    for (int i = 0; i < frameSize; i++) {
        frame[i] = -1;
    }

    for (int i = 0; i < n; i++) {
        int found = 0;
        for (int j = 0; j < frameSize; j++) {
            if (frame[j] == pages[i]) {
                found = 1;
                break;
            }
        }
        if (found == 0) {
            if (frame[pos] != -1) {
                int farthest = 0, farthestPage = 0;
                for (int j = 0; j < frameSize; j++) {
                    if (nextPage[frame[j]] == -1) {
                        farthestPage = j;
                        break;
                    }
                    if (nextPage[frame[j]] > farthest) {
                        farthest = nextPage[frame[j]];
                        farthestPage = j;
                    }
                }
                frame[farthestPage] = pages[i];
                pageFaults++;
            } else {
                frame[pos] = pages[i];
                pageFaults++;
                pos = (pos + 1) % frameSize;
            }
        }
    }
    return pageFaults;
}

// Function to simulate LRU page replacement algorithm
int LRU(int pages[], int n, int frameSize) {
    int lruList[frameSize];
    int pageTable[100] = {0};
    int pageFaults = 0;

    for (int i = 0; i < frameSize; i++) {
        lruList[i] = -1;
    }

    for (int i = 0; i < n; i++) {
        if (pageTable[pages[i]] == 0) {
            for (int j = 0; j < frameSize; j++) {
                if (lruList[j] == -1) {
                    lruList[j] = pages[i];
                    pageTable[pages[i]] = 1;
                    pageFaults++;
                    break;
                }
            }
            if (pageTable[pages[i]] == 0) {
                int min = 0, replaceable = 0;
                for (int j = 1; j < frameSize; j++) {
                    int k = 0;
                    for (; k < i; k++) {
                        if (pages[k] == lruList[j]) {
                            break;
                        }
                    }
                    if (k < i && min < k) {
                        min = k;
                        replaceable = j;
                    }
                }
                lruList[replaceable] = pages[i];
                pageFaults++;
            }
        }
    }

    return pageFaults;
}

// Function to simulate Second Chance page replacement algorithm
int SecondChance(int pages[], int n, int frameSize) {
    int frames[frameSize];
    int referenceBits[frameSize];
    int pageFaults = 0;
    int hand = 0;

    for (int i = 0; i < frameSize; i++) {
        frames[i] = -1;
        referenceBits[i] = 0;
    }

    for (int i = 0; i < n; i++) {
        int found = 0;
        for (int j = 0; j < frameSize; j++) {
            if (frames[j] == pages[i]) {
                referenceBits[j] = 1;
                found = 1;
                break;
            }
        }
        if (!found) {
            while (1) {
                if (!referenceBits[hand]) {
                    frames[hand] = pages[i];
                    referenceBits[hand] = 1;
                    hand = (hand + 1) % frameSize;
                    pageFaults++;
                    break;
                }
                referenceBits[hand] = 0;
                hand = (hand + 1) % frameSize;
            }
        }
    }

    return pageFaults;
}

int main() {
    int pageReferenceString[] = {7,1,0,2,0,3,0,4,2,3,0,3,2,1,2,0,1,7,0,1};
    int n = sizeof(pageReferenceString) / sizeof(pageReferenceString[0]);
    int frameSize = 3;

    printf("Total number of page faults using:\n");
    printf("a. First In First Out (FIFO): %d\n", FIFO(pageReferenceString, n, frameSize));
    printf("b. Optimal: %d\n", Optimal(pageReferenceString, n, frameSize));
    printf("c. Least Recently Used (LRU): %d\n", LRU(pageReferenceString, n, frameSize));
    printf("d. Second Chance: %d\n", SecondChance(pageReferenceString, n, frameSize));

    return 0;
}






// fcfs, sstf, scan c-scan

#include <stdio.h>
#include <stdlib.h>

#define CYLINDER_COUNT 8

// Function prototypes
int calculateFCFS(int requests[], int head);
int calculateSSTF(int requests[], int head);
int calculateSCAN(int requests[], int head, int disk_size);
int calculateCSCAN(int requests[], int head, int disk_size);

// Utility function to calculate absolute difference
int abs_diff(int a, int b) {
    return abs(a - b);
}

// Function to sort an array using bubble sort
void bubbleSort(int arr[], int n) {
    int i, j, temp;
    for (i = 0; i < n-1; i++) {
        for (j = 0; j < n-i-1; j++) {
            if (arr[j] > arr[j+1]) {
                temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
        }
    }
}

int main() {
    int requests[CYLINDER_COUNT] = {98, 183, 37, 122, 14, 124, 65, 67};
    int head = 53;
    int disk_size = 200; // Assuming disk size from 0 to 199

    printf("Total head movements for FCFS: %d\n", calculateFCFS(requests, head));
    printf("Total head movements for SSTF: %d\n", calculateSSTF(requests, head));
    printf("Total head movements for SCAN: %d\n", calculateSCAN(requests, head, disk_size));
    printf("Total head movements for C-SCAN: %d\n", calculateCSCAN(requests, head, disk_size));

    return 0;
}

int calculateFCFS(int requests[], int head) {
    int total_movement = 0;
    for (int i = 0; i < CYLINDER_COUNT; i++) {
        total_movement += abs_diff(head, requests[i]);
        head = requests[i];
    }
    return total_movement;
}

int calculateSSTF(int requests[], int head) {
    int total_movement = 0;
    int serviced[CYLINDER_COUNT] = {0};
    for (int i = 0; i < CYLINDER_COUNT; i++) {
        int min_distance = 999999, index = -1;
        for (int j = 0; j < CYLINDER_COUNT; j++) {
            if (!serviced[j] && abs_diff(head, requests[j]) < min_distance) {
                min_distance = abs_diff(head, requests[j]);
                index = j;
            }
        }
        total_movement += abs_diff(head, requests[index]);
        head = requests[index];
        serviced[index] = 1;
    }
    return total_movement;
}

int calculateSCAN(int requests[], int head, int disk_size) {
    int total_movement = 0;
    int sorted_requests[CYLINDER_COUNT + 1];
    for (int i = 0; i < CYLINDER_COUNT; i++) {
        sorted_requests[i] = requests[i];
    }
    sorted_requests[CYLINDER_COUNT] = head;
    bubbleSort(sorted_requests, CYLINDER_COUNT + 1);

    int head_index = 0;
    for (int i = 0; i <= CYLINDER_COUNT; i++) {
        if (sorted_requests[i] == head) {
            head_index = i;
            break;
        }
    }

    for (int i = head_index; i > 0; i--) {
        total_movement += abs_diff(sorted_requests[i], sorted_requests[i-1]);
    }
    total_movement += sorted_requests[head_index]; // Move to 0
    for (int i = head_index + 1; i < CYLINDER_COUNT; i++) {
        total_movement += abs_diff(sorted_requests[i], sorted_requests[i+1]);
    }
    
    return total_movement;
}

int calculateCSCAN(int requests[], int head, int disk_size) {
    int total_movement = 0;
    int sorted_requests[CYLINDER_COUNT + 2];
    for (int i = 0; i < CYLINDER_COUNT; i++) {
        sorted_requests[i] = requests[i];
    }
    sorted_requests[CYLINDER_COUNT] = head;
    sorted_requests[CYLINDER_COUNT + 1] = 0;
    bubbleSort(sorted_requests, CYLINDER_COUNT + 2);

    int head_index = 0;
    for (int i = 0; i <= CYLINDER_COUNT + 1; i++) {
        if (sorted_requests[i] == head) {
            head_index = i;
            break;
        }
    }

    for (int i = head_index; i < CYLINDER_COUNT + 1; i++) {
        total_movement += abs_diff(sorted_requests[i], sorted_requests[i+1]);
    }
    total_movement += abs_diff(disk_size - 1, sorted_requests[CYLINDER_COUNT + 1]);
    for (int i = 0; i < head_index - 1; i++) {
        total_movement += abs_diff(sorted_requests[i], sorted_requests[i+1]);
    }

    return total_movement;
}






//producer comsumer problem

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define BUFFER_SIZE 5

char buffer[BUFFER_SIZE];
sem_t mutex, full, empty;

void *producer(void *arg);
void *consumer(void *arg);
void insert_item(char item);
char remove_item();

int main() {

    sem_init(&mutex, 0, 1);
    sem_init(&full, 0, 0);
    sem_init(&empty, 0, BUFFER_SIZE);


    pthread_t producer_thread, consumer_thread;
    pthread_create(&producer_thread, NULL, producer, NULL);
    pthread_create(&consumer_thread, NULL, consumer, NULL);


    pthread_join(producer_thread, NULL);
    pthread_join(consumer_thread, NULL);


    sem_destroy(&mutex);
    sem_destroy(&full);
    sem_destroy(&empty);

    return 0;
}

void *producer(void *arg) {
    for (int i = 0; i < 10; ++i) {
        char item = 'A' + i;
        sem_wait(&empty);
        sem_wait(&mutex);
        insert_item(item);
        sem_post(&mutex);
        sem_post(&full);
        printf("Produced:%c\n",item);
        sleep(1);
    }
    pthread_exit(NULL);
}

void *consumer(void *arg) {
    for (int i = 0; i < 10; ++i) {
        sem_wait(&full);
        sem_wait(&mutex);
        char item = remove_item();
        sem_post(&mutex);
        sem_post(&empty);
        printf("Consumed: %c\n", item);
        sleep(1);
    }
    pthread_exit(NULL);
}

void insert_item(char item) {
    for (int i = 0; i < BUFFER_SIZE; ++i) {
        if (buffer[i] == 0) {
            buffer[i] = item;
            return;
        }
    }
}

char remove_item() {
    char item = buffer[0];
    for (int i = 1; i < BUFFER_SIZE; ++i) {
        buffer[i - 1] = buffer[i];
    }
    buffer[BUFFER_SIZE - 1] = 0;
    return item;
}






//reader writer

#include <pthread.h>
#include <semaphore.h>
#include <stdio.h>

sem_t wrt;
pthread_mutex_t mutex;
int cnt = 1;
int numreader = 0;

void *writer(void *wno)
{
    sem_wait(&wrt);
    cnt = cnt*2;
    printf("Writer %d modified cnt to %d\n",(*((int *)wno)),cnt);
    sem_post(&wrt);

}
void *reader(void *rno)
{
    pthread_mutex_lock(&mutex);
    numreader++;
    if(numreader == 1) {
        sem_wait(&wrt);
    }
    pthread_mutex_unlock(&mutex);
    printf("Reader %d: read cnt as %d\n",*((int *)rno),cnt);
    pthread_mutex_lock(&mutex);
    numreader--;
    if(numreader == 0) {
        sem_post(&wrt);
    }
    pthread_mutex_unlock(&mutex);
}

int main()
{

    pthread_t read[10],write[5];
    pthread_mutex_init(&mutex, NULL);
    sem_init(&wrt,0,1);

    int a[10] = {1,2,3,4,5,6,7,8,9,10};

    for(int i = 0; i < 10; i++) {
        pthread_create(&read[i], NULL, (void *)reader, (void *)&a[i]);
    }
    for(int i = 0; i < 5; i++) {
        pthread_create(&write[i], NULL, (void *)writer, (void *)&a[i]);
    }

    for(int i = 0; i < 10; i++) {
        pthread_join(read[i], NULL);
    }
    for(int i = 0; i < 5; i++) {
        pthread_join(write[i], NULL);
    }

    pthread_mutex_destroy(&mutex);
    sem_destroy(&wrt);

    return 0;
}





//dining philosopher

#include <pthread.h>
#include <semaphore.h>
#include <stdio.h>
#define N 5
#define THINKING 2
#define HUNGRY 1
#define EATING 0
#define LEFT (phnum + 4) % N
#define RIGHT (phnum + 1) % N
int state[N];
int phil[N] = { 0, 1, 2, 3, 4 };
sem_t mutex;
sem_t S[N];
void test(int phnum)
{
    if (state[phnum] == HUNGRY
        && state[LEFT] != EATING
        && state[RIGHT] != EATING) {
        state[phnum] = EATING;
        sleep(2);
        printf("Philosopher %d takes fork %d and %d\n",
        phnum + 1, LEFT + 1, phnum + 1);
        printf("Philosopher %d is Eating\n", phnum + 1);
        sem_post(&S[phnum]);
    }
}

void take_fork(int phnum)
{
    sem_wait(&mutex);
    state[phnum] = HUNGRY;
    printf("Philosopher %d is Hungry\n", phnum + 1);
    test(phnum);
    sem_post(&mutex);
    sem_wait(&S[phnum]);
    sleep(1);
}
void put_fork(int phnum)
{
    sem_wait(&mutex);
    state[phnum] = THINKING;
    printf("Philosopher %d putting fork %d and %d down\n",
    phnum + 1, LEFT + 1, phnum + 1);
    printf("Philosopher %d is thinking\n", phnum + 1);
    test(LEFT);
    test(RIGHT);
    sem_post(&mutex);
}
void* philosopher(void* num)
{
    while (1) {
        int* i = num;
        sleep(1);
        take_fork(*i);
        sleep(0);
        put_fork(*i);
    }
}
int main()
{
    int i;
    pthread_t thread_id[N];
    sem_init(&mutex, 0, 1);
    for (i = 0; i < N; i++)
        sem_init(&S[i], 0, 0);
    for (i = 0; i < N; i++) {
        pthread_create(&thread_id[i], NULL,
        philosopher, &phil[i]);
        printf("Philosopher %d is thinking\n", i + 1);
    }
    for (i = 0; i < N; i++)
        pthread_join(thread_id[i], NULL);
}




//cpu scheduling- fcfs


#include <stdio.h>
#define MAX_PROCESSES 10
struct Process {
    int pid;
    int arrival;
    int burst;
    int completion;
    int waiting;
};

void fcfs(struct Process processes[], int n) {
    int currentTime = 0;
    for (int i = 0; i < n; i++) {
        if (currentTime < processes[i].arrival) {
            currentTime = processes[i].arrival;
        }
        processes[i].completion = currentTime + processes[i].burst;
        processes[i].waiting = currentTime - processes[i].arrival; 
        currentTime = processes[i].completion;
    }
}

int main() {
    int n;
    float avgTurnaroundTime = 0;
    float avgWaitingTime = 0;
    struct Process processes[MAX_PROCESSES];
    printf("==========/First Come First Serve Algorithm/===========\n");

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    printf("Enter arrival time and burst time for each process:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d: ", i + 1);
        scanf("%d %d", &processes[i].arrival, &processes[i].burst);
        processes[i].pid = i + 1;
    }
    fcfs(processes, n);

    for (int i = 0; i < n; i++) {
        avgTurnaroundTime += processes[i].completion - processes[i].arrival;
        avgWaitingTime += processes[i].waiting;
    }
    avgTurnaroundTime /= n;
    avgWaitingTime /= n;

    printf("\nGantt Chart:\n");
    printf(" ");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < processes[i].burst; j++) {
            printf("--");
        }
        printf(" ");
    }
    printf("\n|");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < processes[i].burst - 1; j++) {
            printf(" ");
        }
        printf("P%d", processes[i].pid);
        for (int j = 0; j < processes[i].burst - 1; j++) {
            printf(" ");
        }
        printf("|");
    }
    printf("\n ");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < processes[i].burst; j++) {
            printf("--");
        }
        printf(" ");
    }
    printf("\n");
        printf("0");
    for (int i = 0; i < n; i++) {
        printf("   %d\t\t", processes[i].completion);
    }
    
    printf("\nFCFS Scheduling:\n");
    printf("PID\tArrival\tBurst\tCompletion\tTurnaround\tWaiting\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t\t%d\t\t%d\n", processes[i].pid, processes[i].arrival, 
               processes[i].burst, processes[i].completion, 
               processes[i].completion - processes[i].arrival, processes[i].waiting);
    }

    printf("\nAverage Turnaround Time: %.2f\n", avgTurnaroundTime);
    printf("Average Waiting Time: %.2f\n", avgWaitingTime);

    return 0;
}







//cpu scheduling- round robin

#include <stdio.h>

void findWaitingTime(int processes[], int n, int bt[], int wt[], int quantum) {
    int rem_bt[n];
    for (int i = 0; i < n; i++)
        rem_bt[i] = bt[i];

    int t = 0;

    while (1) {
        int done = 1;

        for (int i = 0; i < n; i++) {
            if (rem_bt[i] > 0) {
                done = 0;

                if (rem_bt[i] > quantum) {
                    t += quantum;
                    rem_bt[i] -= quantum;
                } else {
                    t += rem_bt[i];
                    wt[i] = t - bt[i];
                    rem_bt[i] = 0;
                }
            }
        }
        if (done == 1)
            break;
    }
}

void findTurnAroundTime(int processes[], int n, int bt[], int wt[], int tat[]) {
    for (int i = 0; i < n; i++)
        tat[i] = bt[i] + wt[i];
}

void findavgTime(int processes[], int n, int bt[], int quantum) {
    int wt[n], tat[n];
    int total_wt = 0, total_tat = 0;

    findWaitingTime(processes, n, bt, wt, quantum);

    findTurnAroundTime(processes, n, bt, wt, tat);

    printf("PN\tB\tWT\tTAT\n");

    for (int i = 0; i < n; i++) {
        total_wt = total_wt + wt[i];
        total_tat = total_tat + tat[i];
        printf("%d\t%d\t%d\t%d\n", processes[i], bt[i], wt[i], tat[i]);
    }

    printf("Average waiting time = %.2f\n", (float)total_wt / (float)n);
    printf("Average turn around time = %.2f\n", (float)total_tat / (float)n);
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    int processes[n];
    printf("Enter process IDs: ");
    for (int i = 0; i < n; i++)
        scanf("%d", &processes[i]);

    int burst_time[n];
    printf("Enter burst times for each process: ");
    for (int i = 0; i < n; i++)
        scanf("%d", &burst_time[i]);

    int quantum;
    printf("Enter time quantum: ");
    scanf("%d", &quantum);

    findavgTime(processes, n, burst_time, quantum);
    return 0;
}





//cpu scheduling - sjf

#include <stdio.h>

struct Process {
    int p_id;
    int bt;
    int at; // Arrival time
    int wt;
    int tat;
    int completed;
};

int findShortestJob(struct Process processes[], int n, int currentTime) {
    int shortestJobIndex = -1;
    int shortestBurst = 9999;

    for (int i = 0; i < n; ++i) {
        if (!processes[i].completed && processes[i].bt < shortestBurst && processes[i].at <= currentTime && processes[i].bt > 0) {
            shortestBurst = processes[i].bt;
            shortestJobIndex = i;
        }
    }

    return shortestJobIndex;
}

void calculateTimes(struct Process processes[], int n) {
    int currentTime = 0;
    int totalBurst = 0;

    // Calculate total burst time
    for (int i = 0; i < n; ++i) {
        totalBurst += processes[i].bt;
    }

    printf("Gantt Chart:\n");
    printf("|");

    while (currentTime < totalBurst) {
        int shortestJobIndex = findShortestJob(processes, n, currentTime);
        if (shortestJobIndex == -1) {
            currentTime++;
            continue;
        }

        printf(" P%d(%d) |", processes[shortestJobIndex].p_id, processes[shortestJobIndex].bt);

        processes[shortestJobIndex].bt--;

        for (int i = 0; i < n; ++i) {
            if (i != shortestJobIndex && !processes[i].completed && processes[i].at <= currentTime) {
                processes[i].wt++;
            }
        }

        currentTime++;

        if (processes[shortestJobIndex].bt == 0) {
            processes[shortestJobIndex].completed = 1;
            processes[shortestJobIndex].tat = currentTime;
        }
    }
    printf("\n");
}

void calculateAverages(struct Process processes[], int n, float *avg_waiting_time, float *avg_turnaround_time) {
    int total_waiting_time = 0;
    int total_turnaround_time = 0;

    for (int i = 0; i < n; ++i) {
        total_waiting_time += processes[i].wt;
        total_turnaround_time += processes[i].tat;
    }

    *avg_waiting_time = (float)total_waiting_time / n;
    *avg_turnaround_time = (float)total_turnaround_time / n;
}

void displayProcesses(struct Process processes[], int n) {
    printf("Process ID\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; ++i) {
        printf("%d\t\t%d\t\t%d\n", processes[i].p_id, processes[i].wt, processes[i].tat);
    }
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    for (int i = 0; i < n; ++i) {
        printf("Enter burst time for process %d: ", i + 1);
        scanf("%d", &processes[i].bt);
        printf("Enter arrival time for process %d: ", i + 1);
        scanf("%d", &processes[i].at);
        processes[i].p_id = i + 1;
        processes[i].wt = 0;
        processes[i].tat = 0;
        processes[i].completed = 0;
    }

    calculateTimes(processes, n);

    float avg_waiting_time, avg_turnaround_time;
    calculateAverages(processes, n, &avg_waiting_time, &avg_turnaround_time);

    displayProcesses(processes, n);

    printf("Average Waiting Time: %.2f\n", avg_waiting_time);
    printf("Average Turnaround Time: %.2f\n", avg_turnaround_time);

    return 0;
}





//cpu scheduling - srsf


#include <stdio.h>
#include <limits.h>

struct Process {
    int pid;
    int bt;
    int art;
};

void findWaitingTime(struct Process proc[], int n, int wt[]) {
    int rt[n];
    for (int i = 0; i < n; i++)
        rt[i] = proc[i].bt;

    int complete = 0, t = 0, minm = INT_MAX;
    int shortest = 0, finish_time;
    int check = 0;

    while (complete != n) {
        for (int j = 0; j < n; j++) {
            if (proc[j].art <= t && rt[j] < minm && rt[j] > 0) {
                minm = rt[j];
                shortest = j;
                check = 1;
            }
        }

        if (check == 0) {
            t++;
            continue;
        }

        rt[shortest]--;

        minm = rt[shortest];
        if (minm == 0)
            minm = INT_MAX;

        if (rt[shortest] == 0) {
            complete++;
            check = 0;

            finish_time = t + 1;

            wt[shortest] = finish_time - proc[shortest].bt - proc[shortest].art;

            if (wt[shortest] < 0)
                wt[shortest] = 0;
        }
        t++;
    }
}

void findTurnAroundTime(struct Process proc[], int n, int wt[], int tat[]) {
    for (int i = 0; i < n; i++)
        tat[i] = proc[i].bt + wt[i];
}

void findavgTime(struct Process proc[], int n) {
    int wt[n], tat[n];
    int total_wt = 0, total_tat = 0;

    findWaitingTime(proc, n, wt);
    findTurnAroundTime(proc, n, wt, tat);

    printf("Processes\tBurst time\tWaiting time\tTurn around time\n");

    for (int i = 0; i < n; i++) {
        total_wt = total_wt + wt[i];
        total_tat = total_tat + tat[i];
        printf(" %d\t\t%d\t\t%d\t\t%d\n", proc[i].pid, proc[i].bt, wt[i], tat[i]);
    }

    printf("Average waiting time = %.2f\n", (float)total_wt / (float)n);
    printf("Average turn around time = %.2f\n", (float)total_tat / (float)n);
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process proc[n];

    for (int i = 0; i < n; i++) {
        printf("Enter details for process %d (PID, Burst Time, Arrival Time): ", i + 1);
        scanf("%d %d %d", &proc[i].pid, &proc[i].bt, &proc[i].art);
    }

    findavgTime(proc, n);
    return 0;
}






//cpu scheduling - preemptive

#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

struct Process {
	int processID;
	int arrivalTime;
	int priority;
	int burstTime;
	int remainingTime;
	int startTime;
	int completionTime;
};

// Function to find process with highest priority among the arrived processes at current time
int findHighestPriorityProcess(struct Process processes[], int n, int currentTime) {
	int highestPriority = INT_MAX;
	int highestPriorityIndex = -1;

	for (int i = 0; i < n; i++) {
		if (processes[i].arrivalTime <= currentTime && processes[i].remainingTime > 0) {
			if (processes[i].priority < highestPriority) {
				highestPriority = processes[i].priority;
				highestPriorityIndex = i;
			}
		}
	}

	return highestPriorityIndex;
}

// Function to calculate waiting time, turnaround time, and average time
void calculateTimes(struct Process processes[], int n, int waitingTime[], int turnaroundTime[], float *averageWaitingTime, float *averageTurnaroundTime) {
	int totalWaitingTime = 0, totalTurnaroundTime = 0;

	for (int i = 0; i < n; i++) {
		turnaroundTime[i] = processes[i].completionTime - processes[i].arrivalTime;
		waitingTime[i] = turnaroundTime[i] - processes[i].burstTime;

		totalWaitingTime += waitingTime[i];
		totalTurnaroundTime += turnaroundTime[i];
	}

	*averageWaitingTime = (float)totalWaitingTime / n;
	*averageTurnaroundTime = (float)totalTurnaroundTime / n;
}

// Priority Preemptive Scheduling Algorithm
void priorityPreemptive(struct Process processes[], int n) {
	int currentTime = 0;
	int remainingProcesses = n;
	int waitingTime[n], turnaroundTime[n];
	float averageWaitingTime, averageTurnaroundTime;

	while (remainingProcesses > 0) {
		int highestPriorityIndex = findHighestPriorityProcess(processes, n, currentTime);

		if (highestPriorityIndex == -1) {
			currentTime++;
			continue;
		}

		processes[highestPriorityIndex].remainingTime--;

		if (processes[highestPriorityIndex].startTime == -1)
			processes[highestPriorityIndex].startTime = currentTime;

		if (processes[highestPriorityIndex].remainingTime == 0) {
			processes[highestPriorityIndex].completionTime = currentTime + 1;
			remainingProcesses--;
		}

		currentTime++;
	}

	calculateTimes(processes, n, waitingTime, turnaroundTime, &averageWaitingTime, &averageTurnaroundTime);

	printf("Process ID\tArrival Time\tPriority\tBurst Time\tStart Time\tCompletion Time\tWaiting Time\tTurnaround Time\n");
	for (int i = 0; i < n; i++) {
		printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n",
			processes[i].processID, processes[i].arrivalTime, processes[i].priority, processes[i].burstTime,
			processes[i].startTime, processes[i].completionTime, waitingTime[i], turnaroundTime[i]);
	}

	printf("Average Waiting Time: %.2f\n", averageWaitingTime);
	printf("Average Turnaround Time: %.2f\n", averageTurnaroundTime);
}

int main() {
	int n = 5;
	struct Process processes[] = {
		{1, 0, 3, 5, 5, -1, -1},
		{2, 1, 2, 4, 4, -1, -1},
		{3, 2, 1, 3, 3, -1, -1},
		{4, 3, 4, 2, 2, -1, -1},
		{5, 4, 5, 1, 1, -1, -1}
	};

	priorityPreemptive(processes, n);

	return 0;
}






//cpu scheduling- non preemptive

#include <stdio.h>
 
//Function to swap two variables
void swap(int *a,int *b)
{
    int temp=*a;
    *a=*b;
    *b=temp;
}
int main()
{
    int n;
    printf("Enter Number of Processes: ");
    scanf("%d",&n);
 
    // b is array for burst time, p for priority and index for process id
    int b[n],p[n],index[n];
    for(int i=0;i<n;i++)
    {
        printf("Enter Burst Time and Priority Value for Process %d: ",i+1);
        scanf("%d %d",&b[i],&p[i]);
        index[i]=i+1;
    }
    for(int i=0;i<n;i++)
    {
        int a=p[i],m=i;
 
        //Finding out highest priority element and placing it at its desired position
        for(int j=i;j<n;j++)
        {
            if(p[j] > a)
            {
                a=p[j];
                m=j;
            }
        }
 
        //Swapping processes
        swap(&p[i], &p[m]);
        swap(&b[i], &b[m]);
        swap(&index[i],&index[m]);
    }
 
    // T stores the starting time of process
    int t=0;
 
    //Printing scheduled process
    printf("Order of process Execution is\n");
    for(int i=0;i<n;i++)
    {
        printf("P%d is executed from %d to %d\n",index[i],t,t+b[i]);
        t+=b[i];
    }
    printf("\n");
    printf("Process Id     Burst Time   Wait Time    TurnAround Time\n");
    int wait_time=0;
    for(int i=0;i<n;i++)
    {
        printf("P%d          %d          %d          %d\n",index[i],b[i],wait_time,wait_time + b[i]);
        wait_time += b[i];
    }
    return 0;
}






//cpu scheduling fcfs

#include <stdio.h>
#define MAX_PROCESSES 10
struct Process {
    int pid;
    int arrival;
    int burst;
    int completion;
    int waiting;
};

void fcfs(struct Process processes[], int n) {
    int currentTime = 0;
    for (int i = 0; i < n; i++) {
        if (currentTime < processes[i].arrival) {
            currentTime = processes[i].arrival;
        }
        processes[i].completion = currentTime + processes[i].burst;
        processes[i].waiting = currentTime - processes[i].arrival; 
        currentTime = processes[i].completion;
    }
}

int main() {
    int n;
    float avgTurnaroundTime = 0;
    float avgWaitingTime = 0;
    struct Process processes[MAX_PROCESSES];
    printf("==========/First Come First Serve Algorithm/===========\n");

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    printf("Enter arrival time and burst time for each process:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d: ", i + 1);
        scanf("%d %d", &processes[i].arrival, &processes[i].burst);
        processes[i].pid = i + 1;
    }
    fcfs(processes, n);

    for (int i = 0; i < n; i++) {
        avgTurnaroundTime += processes[i].completion - processes[i].arrival;
        avgWaitingTime += processes[i].waiting;
    }
    avgTurnaroundTime /= n;
    avgWaitingTime /= n;

    printf("\nGantt Chart:\n");
    printf(" ");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < processes[i].burst; j++) {
            printf("--");
        }
        printf(" ");
    }
    printf("\n|");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < processes[i].burst - 1; j++) {
            printf(" ");
        }
        printf("P%d", processes[i].pid);
        for (int j = 0; j < processes[i].burst - 1; j++) {
            printf(" ");
        }
        printf("|");
    }
    printf("\n ");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < processes[i].burst; j++) {
            printf("--");
        }
        printf(" ");
    }
    printf("\n");
        printf("0");
    for (int i = 0; i < n; i++) {
        printf("   %d\t\t", processes[i].completion);
    }
    
    printf("\nFCFS Scheduling:\n");
    printf("PID\tArrival\tBurst\tCompletion\tTurnaround\tWaiting\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t\t%d\t\t%d\n", processes[i].pid, processes[i].arrival, 
               processes[i].burst, processes[i].completion, 
               processes[i].completion - processes[i].arrival, processes[i].waiting);
    }

    printf("\nAverage Turnaround Time: %.2f\n", avgTurnaroundTime);
    printf("Average Waiting Time: %.2f\n", avgWaitingTime);

    return 0;
}

